# üìù Negro Industries ‚Äî PRD (Product Requirements Document)

---

## üìå Overview

**Negro Industries** is an AI-powered SaaS orchestration platform styled like a **Michelin-star restaurant** with an **open kitchen**. The public-facing site is **serious, minimal, and high-end**‚Äîstyled in **ASCII graphics** with **Geist Mono** font‚Äîwhile the backend **AI agents** are **cool, human-like digital coworkers** who provide transparent updates in a playful, authentic voice.

Users can:

* Submit projects via **Telegram bots**.
* Watch **live agent activity logs** streamed to the site.
* Purchase services via **Stripe payments**.
* Receive AI-generated outputs like PRDs, code scaffolds, deployments, changelogs, and social posts.

---

## üíΩ UI & Design

### Public Site (Next.js 15)

* **ASCII-inspired interface** (no heavy graphics).
* **Geist Mono** font via Vercel npm package (`@geist-ui/react` or `@geist-ui/core`).
* Serious, monochrome, minimal color use (black, white, grayscale).
* Responsive design for web and mobile.

### Dashboard

* **Terminal-style panes** (like TMUX) for each active AI agent.
* Real-time log streaming (Supabase Realtime or WebSocket).
* User project list, task history, and billing status.

---

## üë• AI Agents ("The Team")

Each AI agent has:

* **Name**
* **Job title**
* **Personality (flava)**
* **Why their work matters (selling the value)**

| Name           | Role            | Voice & Tone                                    |
| -------------- | --------------- | ----------------------------------------------- |
| **Dot Matrix** | Project Chef    | Precise, a little sassy                         |
| **Repo Rocco** | Code Scaffolder | Chill, "get it done" vibe                       |
| **Chango**     | Hype Machine    | Hype man energy, social media savvy             |
| **Lola Lingo** | Storyteller     | Smooth, clever, brand voice queen               |
| **Stack Jack** | Infra Boss      | Tech muscle, no-nonsense but playful            |
| **Boss Lady**  | Payment Closer  | Confident, sharp, encourages upgrades naturally |

---

## üí¨ Conversational Interface

* **Telegram Bots (node-telegram-bot-api)**:

  * Multi-bot setup (one per agent or function group).
  * Multi-step, multi-turn AI conversations using **Vercel AI SDK**.
  * Supports inline buttons (yes/no, approve, deploy).
  * Conversation state saved to **Supabase**.

* **Human-in-the-loop:**
  Agents pause and wait for Telegram user input before executing tools (repo creation, deploy, post).

---

## üîß Tech Stack

| Layer         | Tools                                         |
| ------------- | --------------------------------------------- |
| Frontend      | Next.js 15 (App Router), Geist Mono           |
| AI Backend    | Vercel AI SDK, OpenAI tools, function calling |
| Bots          | node-telegram-bot-api                         |
| Orchestration | Supabase (Postgres, KV, Realtime)             |
| Payments      | Stripe (checkout + webhooks)                  |
| Deployment    | Vercel + optional Cloudflare Workers          |
| Shared Code   | `/packages/shared-utils` monorepo package     |

---

## üí≥ Payments

* **Stripe Checkout** (one-time and subscription).
* Agents prompt for upgrades mid-workflow when premium features are needed.
* Payment status is displayed in both Telegram and Dashboard.

---

## üìà Live Updates & Transparency

* All AI agent activity is **visible in real time** on the dashboard.
* Users see:

  * What agents are doing.
  * Why it matters.
  * How it saves time or adds value.

---

## üõÉ Roadmap

| Phase   | Deliverables                                           |
| ------- | ------------------------------------------------------ |
| Phase 1 | Next.js site + ASCII design + Geist Mono styling       |
| Phase 2 | Telegram bot MVP + AI SDK integration + Supabase state |
| Phase 3 | Dashboard live logs + Stripe payment flow              |
| Phase 4 | Multi-agent orchestration + public launch              |

---

## üîß Technical Requirements

### Frontend Requirements
* Next.js 15 with App Router
* Geist Mono font implementation
* ASCII-inspired UI components
* Responsive design for mobile and desktop
* Real-time dashboard with terminal-style panes
* Live log streaming interface
* User authentication and project management

### Backend Requirements
* Telegram bot API integration using node-telegram-bot-api
* Vercel AI SDK for multi-turn conversations
* OpenAI function calling for tool execution
* Supabase for database, real-time, and state management
* Stripe integration for payments and subscriptions
* Multi-agent orchestration system
* Human-in-the-loop workflow management

### AI Agent System
* Six distinct AI agents with unique personalities
* Conversational state management
* Tool execution with user approval
* Real-time activity logging
* Progress tracking and reporting
* Payment integration and upgrade prompts

### Infrastructure
* Vercel deployment for frontend
* Supabase backend services
* Stripe webhook handling
* Real-time communication between agents and frontend
* Secure API key management
* Monitoring and logging systems

---

## üìã Core Features

### User Journey
1. User initiates conversation with Telegram bot
2. AI agent gathers project requirements through conversation
3. Agent presents plan and pricing options
4. User approves and makes payment via Stripe
5. Agent executes tasks with real-time updates
6. User receives deliverables and can track progress on dashboard

### Key Deliverables
* Project Requirements Documents (PRDs)
* Code scaffolding and repository setup
* Deployment automation
* Social media content generation
* Brand voice and storytelling
* Infrastructure provisioning
* Payment processing and subscription management

### Technical Integrations
* Telegram Bot API for user communication
* Vercel AI SDK for conversational AI
* OpenAI for language models and function calling
* Supabase for data persistence and real-time updates
* Stripe for payment processing
* GitHub API for repository management
* Vercel API for deployment automation 