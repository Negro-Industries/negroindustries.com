# 📘 Product Requirements Document (PRD)

## Project: Negro Industries – Marketing Agent Prototype

### Owner: James Washington  
### Created: 2025-06-07  
### Version: 1.0

---

## 🎯 Goal

Build a marketing agent pipeline that:
- Monitors GitHub repositories for new commits or pull request merges.
- Generates social media-ready posts based on commit diffs using GPT-4.
- Sends the post to a Telegram bot for manual approval via inline buttons.
- Upon approval, logs the event and (optionally) publishes to social media platforms (future milestone).
- Displays a **live, verbose activity log** via the Negro Industries dashboard.

---

## 🧱 Core Features

### 1. GitHub Webhook Listener
- Listens for `push` and `pull_request` events.
- Extracts relevant metadata: repo name, PR title, commits, and file diffs.
- Passes the data to the agent pipeline.

### 2. Commit Diff Summarization
- Extracts:
  - PR title & description
  - Diff summary (changed files, lines added/removed)
  - Author name and commit messages
- Feeds to GPT-4 to generate a social media post (Tweet/LinkedIn-ready).

### 3. Telegram Bot Integration
- Sends generated post to Telegram via a bot message.
- Includes inline buttons: ✅ Approve | ❌ Reject
- On approval, logs the outcome (for now) and returns confirmation.

### 4. Logging & Dashboard
- Logs all events:
  - "Webhook received"
  - "Generating post"
  - "Sent to Telegram"
  - "Approved by user"
- Frontend dashboard displays live logs via:
  - WebSocket stream **OR**
  - Supabase Realtime table with live polling

---

## 🖥️ Tech Stack

| Component               | Stack                            |
|------------------------|----------------------------------|
| Frontend Dashboard      | Next.js 15 (App Router), ShadCN  |
| Log Streaming           | Supabase or WebSocket feed       |
| GitHub Integration      | Octokit + Webhooks               |
| Telegram Bot            | Telegram Bot API                 |
| AI Caption Generator    | OpenAI GPT-4 Turbo               |
| Backend Services        | Node.js API Routes               |
| Deployment              | Vercel or SST (if serverless)    |

---

## 📂 Directory Structure (Recommended)

```
app/
├── api/
│   ├── github/
│   │   └── webhook/
│   │       └── route.ts
│   ├── telegram/
│   │   └── webhook/
│   │       └── route.ts
│   └── logs/
│       └── route.ts
├── dashboard/
│   └── page.tsx
├── components/
│   ├── activity-log.tsx
│   └── dashboard-layout.tsx
└── lib/
    ├── github.ts
    ├── telegram.ts
    ├── openai.ts
    └── supabase.ts
```

---

## 🚀 Development Phases

### Phase 1: Foundation & Setup
- Set up Next.js 15 project with TypeScript
- Configure Supabase for logging
- Set up environment variables and configuration
- Create basic dashboard layout with ShadCN components

### Phase 2: GitHub Integration
- Implement GitHub webhook endpoint
- Set up Octokit for GitHub API interactions
- Create webhook payload parsing and validation
- Test webhook reception and data extraction

### Phase 3: AI Content Generation
- Integrate OpenAI GPT-4 API
- Create prompt engineering for social media posts
- Implement diff summarization logic
- Test content generation with sample commits

### Phase 4: Telegram Bot Integration
- Set up Telegram Bot API
- Create bot webhook endpoint
- Implement inline keyboard for approval/rejection
- Handle user interactions and callbacks

### Phase 5: Logging & Real-time Dashboard
- Implement comprehensive logging system
- Set up Supabase Realtime or WebSocket streaming
- Create live activity log component
- Add real-time updates to dashboard

### Phase 6: Testing & Deployment
- Comprehensive testing of the entire pipeline
- Set up CI/CD pipeline
- Deploy to Vercel
- Configure production webhooks and environment variables

---

## 🔧 Technical Requirements

### Environment Variables
- `GITHUB_WEBHOOK_SECRET`
- `OPENAI_API_KEY`
- `TELEGRAM_BOT_TOKEN`
- `SUPABASE_URL`
- `SUPABASE_ANON_KEY`
- `SUPABASE_SERVICE_ROLE_KEY`

### Database Schema (Supabase)
```sql
CREATE TABLE activity_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  timestamp TIMESTAMPTZ DEFAULT NOW(),
  event_type TEXT NOT NULL,
  repository TEXT,
  pr_title TEXT,
  author TEXT,
  generated_post TEXT,
  status TEXT DEFAULT 'pending',
  telegram_message_id TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### API Endpoints
- `POST /api/github/webhook` - GitHub webhook receiver
- `POST /api/telegram/webhook` - Telegram bot webhook
- `GET /api/logs` - Fetch activity logs
- `GET /api/logs/stream` - WebSocket for real-time logs

---

## 🎯 Success Criteria

1. **GitHub Integration**: Successfully receives and processes webhook events
2. **AI Generation**: Generates relevant, engaging social media posts from commit diffs
3. **Telegram Approval**: Seamless approval workflow via Telegram bot
4. **Real-time Dashboard**: Live activity log updates without page refresh
5. **Reliability**: 99% uptime for webhook processing
6. **Performance**: <2 seconds from webhook to Telegram notification

---

## 🚨 Risks & Mitigations

### Technical Risks
- **GitHub API Rate Limits**: Implement proper error handling and retry logic
- **OpenAI API Failures**: Add fallback content generation or retry mechanisms
- **Telegram Bot Downtime**: Queue messages for retry when service is restored

### Security Risks
- **Webhook Validation**: Verify GitHub webhook signatures
- **API Key Exposure**: Use environment variables and secure storage
- **Unauthorized Access**: Implement proper authentication for dashboard

### Scalability Risks
- **High Webhook Volume**: Implement queue system for processing
- **Database Growth**: Set up log rotation and archival strategy
- **Real-time Connections**: Optimize WebSocket/Realtime connections

---

## 📋 Future Enhancements (Post-MVP)

1. **Multi-Platform Publishing**: Auto-publish to Twitter, LinkedIn, etc.
2. **Content Customization**: Platform-specific post formatting
3. **Analytics Dashboard**: Track engagement metrics
4. **Team Collaboration**: Multiple approvers and role-based access
5. **AI Improvements**: Fine-tuned models for better content generation
6. **Repository Filtering**: Selective monitoring of specific repos/branches 